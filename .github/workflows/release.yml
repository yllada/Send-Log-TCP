name: Go Backend & Frontend Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-backend:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      # Cache Go dependencies
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Run tests and linting for Go
      - name: Run Go tests
        run: go test ./...

      - name: Run Go lint
        run: go vet ./...

      # Build the Go application
      - name: Build Go Backend
        run: |
          go build -ldflags="-s -w" -o myapp ./dist

  build-frontend:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Cache Node.js dependencies
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install dependencies and run frontend tests
      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install

      # - name: Run Frontend Tests
      #   run: |
      #     cd frontend
      #     npm test

      # Build the frontend
      - name: Build Frontend
        run: |
          cd frontend
          npm run build

      # Upload the frontend build as an artifact
      - name: Upload Frontend Build
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist

  build-installer:
    runs-on: windows-latest

    steps:
      # Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      # Build the Go backend for Windows
      - name: Build Go Backend
        run: go build -o myapp.exe ./dist

      # Install Inno Setup
      - name: Install Inno Setup
        run: choco install innosetup

      # Run Inno Setup script to create the installer
      - name: Run Inno Setup Script
        run: |
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" ./inno-compiler.iss

      # Upload the installer as an artifact
      - name: Upload Installer
        uses: actions/upload-artifact@v3
        with:
          name: installer
          path: ./dist/installer.exe

  release:
    needs: [build-backend, build-frontend, build-installer]
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Upload installer to the release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/installer.exe
          asset_name: myapp-installer.exe
          asset_content_type: application/octet-stream
